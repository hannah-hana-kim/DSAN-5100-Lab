# Lab assignment-1
 
Read and work through all code in the lab demonstration section, and do all exercises below

**Note**: The version on the website is just an HTML preview, please go to the share-point folder to download the actual assignment and dependencies.

**SUBMISSION**: Upload the completed *assignment* to Canvas (in HTML or PDF). Make sure ALL images & outputs are included! Please do not submit the completed demonstration, only the completed assignment.


## Problem-1

* This relates to Example 1 in Lab-1, you can recycle code from there 
* Mike had the first three successes in trials 6,8 , and 9 . He had six failures until he reached three successes. Do you think Mike has success probability $p=0.5$ or better? Can a simulation give an answer? To do this do.
  * simulate the number of tosses needed to get to three successes, use the probability success probability p = 0.5. (Hint: use the “mytoss” function we did in the Lab class)
  * Run many simulations (say 10,000) with this success probability. (use the “myattempts” function from the class)
  * If Mike’s success probability were 0.5 or better, he would not need a lot of attempts. Find the fraction of simulations where three successes were reached after 9 tosses or later by somebody with success probability 0.5.

`INSERT YOUR SOLUTION HERE`
```{r}
library(ggplot2)

set.seed((1009))
```

```{r}
# Simulate the number of tosses needed to get to three successes, use the probability success probability p = 0.5. 
# (Hint: use the “mytoss” function we did in the Lab class)

mytoss = function(p) {
  u <- runif(1)
  x <- as.numeric(u < p) # when p is the larger number, there is a higher chance of being this argument true.
  return(x)
  return(x)
}

p=0.5
mytoss(p)

```

```{r}
# Run many simulations (say 10,000) with this success probability. (use the “myattempts” function from the class)
p=0.5
replicate(10000, mytoss(p))

myattempts = function(p) { counter <- 0
while(mytoss(p) == 0) { counter <- counter + 1 }
return(counter) }

myattempts(p)

# If Mike’s success probability were 0.5 or better, he would not need a lot of attempts. Find the fraction of simulations where three successes were reached after 9 tosses or later by somebody with success probability 0.5.

sum(replicate(3, myattempts(p))) # number of failures until the 3 successes 

simulation <- replicate(10000, myattempts(p))
mean(simulation >= 9)
```

## Problem 2: 

Baby names for male and female babies.

Repeat Example 2 using `data/yob2010.txt`. Interpret your results (in wording relates to the problem) for each simulation step by step.

Do the following 

* Read csv file with baby names and make new column names
* Make a the table function returns a vector whose components have names.
* Compute the number of female and male births, using the aggregate() function
* Sample 30 names with replacement. Use probabilities that are proportional to the counts.
* Compute actual probabilities of occurrence
* Find all names which occur both as male and female baby names. First make subsets of female and male births. Then find the set intersection of the names.
* Find out how often each of these names is used for females and males. Use sub-setting to make data frames of female and male birth data for names that are used for both genders. We may drop the gender variable. 
* Now merge the two data frame by names. R finds the merge variable (i.e. name) automatically.

`INSERT YOUR SOLUTION HERE`

```{r}
yob2010 <- read.csv("./data/yob2010.txt", header=FALSE, stringsAsFactors = FALSE)
names(yob2010) <- c("name", "gender", "count") # create new column names
head(yob2010)
```

```{r}
# Make a table function that returns a vector whose components have gender. 
table(yob2010$gender)
(x.0 <- table(yob2010$gender))

names(x.0)
x.0[1] # first column
x.0["F"] # same

# Compute the number of female and male births, using the aggregate() function
aggregate(count ~ gender, data = yob2010, FUN="sum")
aggregate(count ~ gender, data = yob2010, FUN="mean")

# Sample 30 names with replacement. Use probabilities that are proportional to the counts.
myclass <- sort(sample(yob2010$name, 30, replace = T))
myclass

# Compute actual probabilities of occurrence
yob2010$prob <- yob2010$count/sum(yob2010$count)
prob.table <- data.frame(yob2010$name, yob2010$prob)
head(prob.table)
```

```{r}
#Find all names which occur both as male and female baby names. First make subsets of female and male births. Then find the set intersection of the names.
femalebirths <- yob2010[yob2010$gender=="F", ]
malebirths <- yob2010[yob2010$gender=="M", ]
intersect(femalebirths$name, malebirths$name) -> both
head(both)
length(both)
```

```{r}
# Find out how often each of these names is used for females and males. Use sub-setting to make data frames of female and male birth data for names that are used for both genders. We may drop the gender variable. 
yob2010.female.both <- yob2010[is.element(yob2010$name, both) & yob2010$gender=="F", c(1,3)]
yob2010.male.both <- yob2010[is.element(yob2010$name, both) & yob2010$gender=="M", c(1,3)]

names(yob2010.female.both) <- c("name", "female.count")
names(yob2010.male.both) <- c("name", "male.count")
```

```{r}
# Now merge the two data frame by names. R finds the merge variable (i.e. name) automatically.
yob2010.both <- merge(yob2010.female.both, yob2010.male.both)
head(yob2010.both)
```

## Problem-3

* Problem 1.5 in ch. 1 of Dalgaard. On p. 27, replicate was used to simulate the distribution of the mean of 20 random numbers from the exponential distribution by repeating the operation 10 times. That code is `replicate(10,mean(rexp(20)))`

How would you do the same thing with sapply?

`INSERT YOUR SOLUTION HERE`
```{r}
replicate(10,mean(rexp(20)))

sapply(1:10, function(x)mean(rexp(20)))
```
